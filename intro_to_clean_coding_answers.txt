1. Clean code is the standard way to write code that is easy to read and maintain. Not only is writing code about problem solving, but it is also about naming variables and functions with relevant names(verbs, nouns) and making them read almost like english text. Keeping functions clean with writing only code that needs to be maintained by such functions. Don't overload a class or function with unnecessary code that is not relevant to said function or that could be used in other functions making our code more dynamic and abstract.  

2. I read recently that NASA had malfunctions with data that caused an Astronaut to experience a life or death situation when water started flowing into his helmet right before a space walk. The reason that this happened is that the data coming back from the suit was strewn across multiple data collecting systems and it was hard for the engineers to narrow down the cause and where to start looking because their data was not scalable. Thankfully, another Astronaut was nearby and helped him back to the station and NASA put an immediate halt to all non-emergency space-walks at that time. Since then they have went to Node.Js and have been able to get their data processing down from 28-steps to 7-steps which in turn results in safer missions because there is more maintainable and scalable code. 

https://foundation.nodejs.org/wp-content/uploads/sites/50/2017/09/Node_CaseStudy_Nasa_FNL.pdf


3. I do not consider the code to be clean and I would refractor the code without the comments and change the name of the function:

FUNCTION convertFahrenheitToCelsius(x, y) 

  IF farhenheit = 'F' THEN 
    SET temperature to (celsius - 32) * (5 / 9)
    PRINT temperature
  
  ELIF farhenheit = 'C' THEN
    SET temperature to celsius * 1.8000 + 32.00
    PRINT temperature
  
  END IF

END FUNCTION


4. This code looks clean. I am able to look at it and know that it is a function that calculates percentage. 



5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.
 
a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

 FUNCTION printCustomerBill(subTotal, discountRate, paymentType)
      
    PRINT 'Your total due is: ' + subTotal * discountRate + (subTotal * tax)

   END FUNCTION

  FUNCTION checkoutCustomer(subTotal, discountRate, paymentType)

    IF paymentType equals 'Cash' THEN
      
      CALL getPayment RETURNING amount
      
      PRINT 'Change due: ' + amount - subTotal * discountRate + (subTotal * tax)

    ELIF paymentType equals 'Credit Card' THEN 
      
      CALL getPayment RETURNING amount
      
      PRINT 'Your card has been charged: ' + subTotal * discountRate + (subTotal * tax)

    END IF

  END FUNCTION 


b. The following function checks out a book if there are no issues with the guest's account.

  FUNCTION checkoutBook(book, guest) 

    IF guest.accountActive THEN 

      IF guest.hasOverdueBooks OR guest.outstandingFees THEN 

        PRINT 'Unable to check out book'
      
      ELIF guest.oustandingFee equals 0 THEN

        APPEND book to guest.books 

        SET book.status to 'Checked Out'

        PRINT 'Your books have been issued'
      
      END ELIF
    
    END FUNCTION



c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS CustomerBankAccount

  FUNCTION displayBalance

    PRINT balance 

  END FUNCTION

  FUNCTION deposit(amount) 
    
    SET balance to balance + amount

  END FUNCTION

  FUNCTION withdrawl(amount) 

    IF balance is greater than amount THEN 

      SET balance to balance - amount

    END IF

  END FUNCTION

END CLASS

CLASS customerOffers 

  FUNCTION creditCardOffer

    IF NOT (customer.hasCreditCard) THEN

      CALL offerCreditCard

    END IF

  END function

  FUNCTION checkCustomerStatus

    IF NOT (customer.hasCheckingAccount) THEN

      CALL offerCheckingAccount

    END IF 

  END FUNCTION

END CLASS


Programming Questions
 
6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.


const getSquare = (arr) => {
  let sum = 0; 

  for (let i = 0; i < arr.length; i++) {
    sum = sum + arr[i]; 
  }

  if(sum > 0 && Math.sqrt(sum) % 1 === 0) {
    return (Math.sqrt(sum))
  } else {
    return sum; 
  }
}

let arr = [20, 1]

getSquare(arr); 

7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

const findDuplicates = (arr) => {
  for (let i = 0; i < arr.length; i++) {
    for (let i = 0; i < arr.length; i++) {
      if (i !== j && arr[i] === arr[j]) {
        return true
      }
    }
  }
  return false; 
}

let arr = [1, 1, 2, 3, 4, 4]

findDuplicates(arr); 

