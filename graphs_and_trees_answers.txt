1. What is a binary tree and what makes it unique to other trees?

  A binary tree is a data structure made up of nodes, where each node has a left node(lesser), and a right node(larger). The top node is called the Root Node. 

2. What is a heuristic?

  A heuristic is a technique that approaches problem solving, learning, or discovery that employs a practical method, not guaranteed to be optimal or perfect, but is OK for the immediate goals. 

3. What is another problem besides the shortest-path problem that requires the use of heuristics?

  Antivirus software often uses heuristic rules for detecting viruses and other forms of malware. Heuristic scanning looks for behavioral patterns common to a class or family of viruses, with different sets of rules for different viruses. Heuristic scanning has the potential to detect future viruses without requiring the virus to be first detected somewhere else. 


4. What is the difference between a depth-first search and a breadth-first search?

  The main difference between DFS and BFS is the order of visiting each node in a graph. In BFS, we start at the root visiting all immediate nodes before moving on to another node. 


5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.

  It is a graph that where the connection between nodes don't have a set direction, it does not have loops and it does not matter about the cost of travel between nodes. 



6. What kind of graph is a binary search tree?

  Directed, a-cyclic, unweighted




Programming Questions:

Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

class Node {
  constructor(data, left, right) {
    this.data = data;
    this.left = null;
    this.right = null;
  }
}

class BST {
  constructor() {
    this.root = null;
  }

  add(data) {
    let node = this.root;

    if (node === null) {
      this.root = new Node(data);
      return;
    } else {
      let searchTree = function(node) {
        if (data < node.data) {
          if (node.left === null) {
            node.left = new Node(data);
            return;
          } else if (node.left !== null) {
            return searchTree(node.left);
          }
        } else if (data > node.data) {
          if (node.right === null) {
            node.right = new Node(data);
            return;
          } else if (node.right !== null) {
            return searchTree(node.right);
          }
        } else {
          return null;
        }
      };
      return searchTree(node);
    }
  }

  doesExist(data) {
    let current = this.root;

    while (current) {
      if (data === current.data) {
        return true;
      }
      if (data < current.data) {
        current = current.left;
      } else {
        current = current.right;
      }
    }
    return false;
  }
}

let bst = new BST();

bst.add(10);
bst.add(2);
bst.add(4);
bst.add(3);
bst.add(19);

console.log(bst.doesExist(4));


2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.


class Node {
  constructor(data) {
    this.data = data;
    this.left = null;
    this.right = null;
  }
}

class BinarySearchTree {
  constructor() {
    this.root = null;
  }

  findDistanceBetweenNodes(root, num1, num2) {
    var lowestCommonAncestor = this.findCommonAncestor(root, num1, num2);
    var distanceNode1ToRoot = this.countAncestors(lowestCommonAncestor, num1);
    var distanceNode2ToRoot = this.countAncestors(lowestCommonAncestor, num2);
    var distanceRootToAncestor = this.countAncestors(
      root,
      lowestCommonAncestor
    );

    var totalDistance =
      distanceNode1ToRoot + distanceNode2ToRoot - 2 * distanceRootToAncestor;
    return `The distance between these two nodes is ${totalDistance}`;
  }

  findCommonAncestor(root, num1, num2) {
    if (!root) return;

    let lowestCommonAncestor = root.data;

    if (num1 === lowestCommonAncestor || num2 === lowestCommonAncestor) {
      return lowestCommonAncestor;
    }
    if (num1 < lowestCommonAncestor && num2 < lowestCommonAncestor) {
      return this.findCommonAncestor(root.left, num1, num2);
    }
    if (num1 > lowestCommonAncestor && num2 > lowestCommonAncestor) {
      return this.findCommonAncestor(root.right, num1, num2);
    }
    return lowestCommonAncestor;
  }

  countAncestors(root, data) {
    let thisNode = this.root;
    let nodeCount = 0;

    while (thisNode) {
      if (data === thisNode.data) {
        return nodeCount;
      }
      thisNode = data < thisNode.data ? thisNode.left : thisNode.right;
      nodeCount++;
    }
  }

  getRootNode() {
    return this.root;
  }

  add(data) {
    let node = this.root;

    if (node === null) {
      this.root = new Node(data);
      return;
    } else {
      let searchTree = function(node) {
        if (data < node.data) {
          node.left = new Node(data);
          return;
        } else if (node.left !== null) {
          return searchTree(node.left);
        } else if (data > node.data) {
          node.right = new Node(data);
          return;
        } else if (node.right !== null) {
          return searchTree(node.right);
        } else {
          return null;
        }
      };
      return searchTree(node);
    }
  }
}

let bst = new BinarySearchTree();

bst.add(8);
bst.add(10);
bst.add(3);
bst.add(14);
bst.add(6);
bst.add(1);
bst.add(13);
bst.add(7);
bst.add(4);

let root = bst.getRootNode();
console.log(bst.findDistanceBetweenNodes(root, 10, 4));
console.log(bst.findDistanceBetweenNodes(root, 10, 10));
