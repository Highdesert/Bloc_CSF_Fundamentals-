1. What is a hash table?

  A hash table is a type of data structure that stores key-value pairs. Keys must be unique in a hash table allowing us to retrieve a value based on its unique key. 

2. What is hashing?

  Hashing is the conversion from a string to a numerical index. 

3. How does a hash table store data?

  Hash tables store key-value pairs by placing them at a specific location in an array maintained internally in the hash table. 

  4. How are hash tables and objects different? 

    Hash tables are a data structure that allows us to use JavaScript objects to create a numerically indexed structure to store key-value pairs. They differ from objects because objects store properties, and not key-value pairs. 


  5. Determine whether you would use a hash table or an object to store each of the following pieces of data: 

1. A list of pets and their unique names. - //Object
2. The name, age, and the birthday of your best friend. - //Object
3. The name and location of every company in a given city. - //Hash Table
4. All of the books checked out from a library by a particular individual. - //Hash Table
5. The primary and secondary phone numbers for a contact. - //Hash Table

Programming Questions: 








1. Create a hash table that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers.

class HashTable {
  constructor(items) {
    this.size = 97;
    this.storage = [];
  }

  hash(key) {
    let hash = 0;
    for (let i = 0; i < key.length; i++) {
      hash += key.charCodeAt(i);
    }
    return hash % this.size;
  }

  add(key, value) {
    let index = this.hash(key);
    if (this.storage[index] === undefined) {
      this.storage[index] = [[key, value]];
    } else {
      let duplicate = false;
      for (let i = 0; i < this.storage[index].length; i++) {
        if (this.storage[index][i][0] === key) {
          console.log("This number is already in the system");
          duplicate = true;
        }
      }
      if (duplicate === false) {
        this.storage[index].push([key, value]);
      }
    }
  }
  get(key) {
    let index = this.hash(key);
    if (this.storage[index] === undefined) {
      return undefined;
    } else {
      for (let i = 0; i < this.storage[index].length; i++) {
        if (this.storage[index][i][0] === key) {
          return this.storage[index][i][1];
        }
      }
    }
  }
}

class PhoneBook {
  constructor(entries) {
    this.book = new HashTable(entries);
  }

  addContact({ phone, name, address }) {
    this.book.add(phone, { name, address });
  }

  lookup({ phone }) {
    return this.book.get(phone);
  }
}

let contacts = new PhoneBook();

contacts.addContact({
  name: "Andy",
  address: "123 Hash Table Dr.",
  phone: "222-222-2222"
});

contacts.addContact({
  name: "Lisa",
  address: "123 Who Knows Rd.",
  phone: "333-333-3333"
});

console.log(
  contacts.lookup({
    phone: "222-222-2222"
  })
);

console.log(
  contacts.lookup({
    phone: "333-333-3333"
  })
);




2. Create a hash table that allows a store owner to track their store's inventory and quantity.

class HashTable {
  constructor(items) {
    this.hashTableSize = 100;
    this.storage = [];
  }

  hash(key) {
    let hash = 0;
    for (let i = 0; i < key.length; i++) {
      hash += key.charCodeAt(i);
    }
    return hash % this.hashTableSize;
  }

  add(key, value) {
    let index = this.hash(key);
    if (this.storage[index] === undefined) {
      this.storage[index] = [[key, value]];
    } else {
      let duplicate = false;
      for (let i = 0; i < this.storage[index].length; i++) {
        if (this.storage[index][i][0] === key) {
          this.storage[index][i][1] = value;
          duplicate = true;
        }
      }
      if (duplicate === false) {
        this.storage[index].push([key, value]);
      }
    }
  }

  getItems(key) {
    let index = this.hash(key);
    if (this.storage[index] === undefined) {
      return false;
    } else {
      for (let i = 0; i < this.storage[index].length; i++) {
        if (this.storage[index][i][0] === key) {
          return this.storage[index][i][1];
        }
      }
    }
  }

  hasItem(key) {
    return this.getItems(key) !== false;
  }

  remove(key) {
    let index = this.hash(key);
    if (this.storage[index].length === 1 && this.storage[index][0][0] === key) {
      delete this.storage[index];
    } else {
      for (let i = 0; i < this.storage[index]; i++) {
        if (this.storage[index][i][0] === key) {
          delete this.storage[index][i];
        }
      }
    }
  }

  print() {
    return this.storage.filter(items => items !== undefined);
  }
}

class Inventory {
  constructor(items) {
    this.inventory = new HashTable(items);
  }

  addItem({ item, amount }) {
    let number = this.inventory.hasItem(item)
      ? this.inventory.getItems(item) + amount
      : amount;
    console.log(amount);
    this.inventory.add(item, number);
  }

  removeItem({ item, amount }) {
    if (this.inventory.hasItem(item)) {
      if (this.inventory.getItems(item) - amount >= 0) {
        let number = this.inventory.getItems(item) - amount;
        this.inventory.add(item, number);
      } else {
        console.log("not enough " + item + " in stock");
      }
    } else {
      console.log("Item not in stock");
    }
  }

  getInventory() {
    return this.inventory.print();
  }
}

let inventory = new Inventory();

inventory.addItem({
  item: "Jeans",
  amount: 8
});

inventory.addItem({
  item: "T-Shirts",
  amount: 13
});

inventory.removeItem({
  item: "Jeans",
  amount: 3
});

inventory.removeItem({
  amount: "T-Shirts",
  item: 9
});

console.log(inventory.getInventory());

3. Create a hash table that allows digital copies of newspapers to be entered and searched by publisher and publication date.

class HashTable {
  constructor(items) {
    this.hashTableSize = 100;
    this.storage = [];
  }

  hash(key) {
    let hash = 0;
    for (let i = 0; i < key.length; i++) {
      hash += key.charCodeAt(i);
    }
    return hash % this.hashTableSize;
  }

  add(key, value) {
    let index = this.hash(key);
    if (this.storage[index] === undefined) {
      this.storage[index] = [[key, value]];
    } else {
      let duplicate = false;
      for (let i = 0; i < this.storage[index].length; i++) {
        if (this.storage[index][i][0] === key) {
          this.storage[index][i][1] = value;
          duplicate = true;
        }
      }
      if (duplicate === false) {
        this.storage[index].push([key, value]);
      }
    }
  }

  get(key) {
    let index = this.hash(key);
    if (this.storage[index] === undefined) {
      return false;
    } else {
      for (let i = 0; i < this.storage[index].length; i++) {
        if (this.storage[index][i][0] === key) {
          return this.storage[index][i][1];
        }
      }
    }
  }

  remove(key) {
    let index = this.hash(key);
    if (this.storage[index].length === 1 && this.storage[index][0][0] === key) {
      delete this.storage[index];
    } else {
      for (let i = 0; i < this.storage[index].length; i++) {
        if (this.storage[index][i][0] === key) {
          delete this.storage[index][i];
        }
      }
    }
  }

  hasItem(key) {
    return this.get(key) !== false;
  }

  print() {
    return this.storage.filter(items => items !== undefined);
  }
}

class OnlineNewspaper {
  constructor() {
    this.collection = new HashTable();
  }

  addPaper({ publisher, date, paper }) {
    if (this.collection.hasItem(publisher) === false) {
      this.collection.add(publisher, [[date, paper]]);
    } else {
      this.collection.get(publisher).push([date, paper]);
    }
  }

  findPaper(publisher, date) {
    if (this.collection.get(publisher) === undefined) {
      console.log("Paper does not exist");
    } else {
      for (let i = 0; i < this.collection.get(publisher).length; i++) {
        if (this.collection.get(publisher)[i][0] === date) {
          return this.collection.get(publisher)[i][1];
        }
      }
    }
  }
}

let collection = new OnlineNewspaper();

collection.addPaper({
  publisher: "Fly Fishing Magazine",
  date: "03-12-2008",
  paper: "How To Catch A Trout"
});

collection.addPaper({
  publisher: "Outside Magazine",
  date: "03-04-2018",
  paper: "Climber Free Solos"
});

console.log(collection.findPaper("Fly Fishing Magazine", "03-12-2008"));

console.log(collection.findPaper("Outside Magazine", "03-04-2018"));
