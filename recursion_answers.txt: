1. Define and compare recursion and iteration.

  Recursion is a technique where a procedure (a function) calls itself with parameters incrementally moving toward one of the base cases. 

  Iteration is a technique of utilizing a loop to repeat a process. 

  Recursion is a method call in which the method being called is the same as the one making the call while iteration is when a loop is repeatedly executed until a certain condition is met. 

2. Name five algorithms that are commonly implemented by recursion.

  Factorial of a number
  Greatest common divisor
  Fibonacci numbers
  Binary Search
  Reversing a string. 

3. When should you use recursion, and when should you avoid recursion? Give examples for each.

  Recursion uses more memory for the stack and is usually slower due to maintaining the stack. Recursion is usually much easier to write and are more intuitive than iterations. 

  A good recursion over iteration example would be the the Tower of Hanoi problem.  

4. Compare the recursive and iterative solutions to the three algorithms from the checkpoint (factorial, maximum, and fibonacci). What is similar, and what is different?

  The recursive and iterative solutions to the algorithms in the checkpoint are similiar because they each have methods for stopping the execution of the function to avoid an infinite look. They also solve problems by doing a process over and over again until there is an end, or a condition has been met. 

  The difference between recursive and iterative solutions is that is some instances, iteration is easier to understand and visualize (like in the maximim numbers function). Recursion is great for problems like the factorial function, because the solution requires knowing the results one after another. 

5. Given a multi-dimensional collection (such as an array) where the number of dimensions is unknown, write a recursive algorithm to count the number of items in the entire collection.

  const countElements = array => {
  if (!array.length) {
    return 0;
  } else {
    return 1 + countElements(array.slice(1));
  }
};

  console.log(countElements([1, 3, 5, 8]));

6. A palindrome is a word or phrase whose spelling is the same either direction (e.g., racecar). Write a recursive algorithm to determine if a given word or phrase is a palindrome.

  const isPalindrome = string => {
    if (string.length === 0 || string.length === 1) {
      return true;
    }
    if (string[0] === string[string.length - 1]) {
      return isPalindrome(string.slice(1, string.length - 1));
    }
    return false;
  };

  console.log(isPalindrome("anna"));

7. Google Easter Egg: Google the term "recursion". Google will prompt you with "Did you mean: recursion". Explain why this behavior exhibits properties of recursion.

  Placing a link to recursion while searching for recursion, is a visual representation of recursion. 
