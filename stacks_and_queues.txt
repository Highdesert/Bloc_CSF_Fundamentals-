1. What is the main difference between a stack and a queue?

A: The main difference between and stack and a queue is that a stack data structure arranges elements in a LIFO, or last in first out. Whereas a queue implements a FIFO, or first in first out. 

2. What are the similarities between stacks and queues?

A: Similarities between stacks and queues are that they are both linear data structures as they both store elements sequentially. 

3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

A: I would use a stack data structure for both since it is a LIFO structure and the last REDO is the first UNDO. 



Programming Questions
You may program the following question in any language of your choice. Before you begin coding, write out a plan as to how you will solve the question.

1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

const reverse = string => {
  let stack = [];

  for (let i = 0; i < string.length; i++) {
    stack.push(string[i]);
  }

  let reverseString = "";

  while (stack.length > 0) {
    reverseString += stack.pop();
  }

  return reverseString;
};

console.log(reverse("Andy"));


2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

class Queue {
  constructor() {
    this.items = [];
  }

  enqueue(element) {
    this.items.push(element);
  }

  dequeue() {
    if (this.isEmpty()) return "underflow";
    return this.items.shift();
  }

  front() {
    if (this.isEmpty()) return "No elements in Queue";
    return this.items[0];
  }

  isEmpty() {
    return this.items.length == 0;
  }

  printQueue() {
    let str = "";
    for (let i = 0; i < this.items.length; i++) {
      str += this.items[i] + " ";
      return str;
    }
  }
}

let queue = new Queue();

console.log(queue.dequeue());

console.log(queue.isEmpty());

queue.enqueue(10);
queue.enqueue(20);
queue.enqueue(30);
queue.enqueue(40);

console.log(queue.front());

console.log(queue.dequeue());

  

To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be removed and returned.

Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.


class Node {
  constructor(value) {
    this.value = value;
    this.next = null;
  }
}

class Queue {
  constructor() {
    this.first = null;
    this.last = null;
    this.size = 0;
  }
  enqueue(val) {
    let newNode = new Node(val);
    if (!this.first) {
      this.first = newNode;
      this.last = newNode;
    } else {
      this.last.next = newNode;
      this.last = newNode;
    }
    return ++this.size;
  }
  dequeue() {
    if (!this.first) return null;
    let temp = this.first;
    if (this.first === this.last) {
      this.last = null;
    }
    this.first = this.first.next;
    this.size--;
    return temp.value;
  }
}

let q = new Queue();

q.enqueue("first");
q.enqueue("second");
q.enqueue("third");
q.dequeue();

console.log(q);
